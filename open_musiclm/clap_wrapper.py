import numpy as np
from torch import nn
import torch.nn.functional as F
from beartype import beartype
from beartype.typing import List, Optional, Union, Dict
from clap import CLAP

from utils import exists


@beartype
class ClapWrapper(nn.Module):
    def __init__(self,
                 clap: CLAP,
                 clap_cfg: Dict[str, any]
                 ):
        super().__init__()
        self.clap = clap
        self.clap_cfg = clap_cfg

    def forward(self,
                *,
                audio_input: Optional[List[Dict]] = None,
                text_embed: Optional[Dict] = None,
                ):
        """
        Wrapper for clap module that takes in audio or text and returns the embedding from the respective tower
        :param audio_input: list of audio features generated by get_audio_features
        :param text_embed: text embeddings from tokenizer
        """

        assert exists(audio_input) ^ exists(text_embed), "either audio or text must be provided, but not both"

        if exists(audio_input):
            # can send a list to the model, to process many audio tracks in one time (i.e. batch size)
            embedding = self.clap.get_audio_embedding(audio_input)
        else:
            embedding = self.clap.get_text_embedding(text_embed)

        return embedding
